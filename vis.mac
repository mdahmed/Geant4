/control/verbose 2
/control/saveHistory
/run/verbose 0
/run/initialize
#
# activating livermore processes
#/phys/addPhysics emlivermore
# Setting production edges 
#/cuts/setLowEdge 250 eV
#
#setting cuts
#/phys/setGCut  1 nm
#/phys/setECut  1 nm
#
#/run/setCut  0.01 mm
#
/process/inactivate compt
/process/inactivate conv
/process/inactivate Rayl
/process/inactivate GammaToMuPair

# Set Geometry parameters
# Filter 1 properties
/XFCT/det/setFilter1Material G4_Sn
/XFCT/det/setFilter1Thickness 0.1 cm

# Filter 2 properties
/XFCT/det/setFilter2Material G4_AIR
/XFCT/det/setFilter2Thickness 0.1 cm

# Filter to sample distance
/XFCT/det/FilterToSmplDis 2. cm

# Sample to detector distance
/XFCT/det/distance 6. cm

# Concentral of nano particle solution (0 - 1)
/XFCT/det/setNanoConc 0.01

# Set collimator properties
/XFCT/det/setCollRadius 0.25 cm
/XFCT/det/setCollThickness 4. cm
#
# Choose point source with zero divergence or Cone beam
/gun/coneBeam on

# Choose particle type
/gun/particle gamma

# If monoenergetic, choose energy
/gun/energy 125 keV

# Provide input gun spectrum
#/gun/spectrum on

#
/run/initialize
# Use this open statement to create an OpenGL view:
/vis/open OGL
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 135. 125.
#
# Specify zoom value:
#/vis/viewer/zoom 2.

# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe

# To get nice view
/vis/geometry/set/visibility World 0 false

# Draw coordinate axes:
/vis/scene/add/axes 0 0 0 10 cm
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate 10000
#
/run/beamOn 500

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush

